* Hello chords!
* steps
** to iterate
https://common-lisp.net/project/iterate/doc/index.html#Top

http://www.gigamonkeys.com/book/programming-in-the-large-packages-and-symbols.html
In the REPL buffer in SLIME you can also change packages with a REPL shortcut. Type a comma, and then enter change-package at the Command: prompt.
#+BEGIN_SRC lisp
(ql:quickload "iterate")
(in-package #:iterate)

;; (mapcar #'package-name (package-use-list :cl-user))
#+END_SRC

#+BEGIN_SRC lisp
(iterate 
  (for n from 1 to 10)
  (collect (* n n)))
#+END_SRC

#+RESULTS:
| 1 | 4 | 9 | 16 | 25 | 36 | 49 | 64 | 81 | 100 |

#+BEGIN_SRC lisp
(iterate 
  (for n from 1 to 10)
  (for k in '(10 100))
  (collect (* k n)))
#+END_SRC

#+RESULTS:
| 10 | 200 |

#+BEGIN_SRC lisp
(iterate 
  (for n from 1 to 10)
  (collect
      (iterate 
	(for k in '(10 100 1000))
	(collect (* k n)))))
#+END_SRC

#+RESULTS:
|  10 |  100 |  1000 |
|  20 |  200 |  2000 |
|  30 |  300 |  3000 |
|  40 |  400 |  4000 |
|  50 |  500 |  5000 |
|  60 |  600 |  6000 |
|  70 |  700 |  7000 |
|  80 |  800 |  8000 |
|  90 |  900 |  9000 |
| 100 | 1000 | 10000 |

#+BEGIN_SRC lisp
(iter (for x from 1 to 24)  
 (collect x into xs)
 (collect (random2 0 10) into ys)
 (finally (return (mk-bpf xs ys))))
#+END_SRC
** 
** 
** many pc-octaves
#+BEGIN_SRC lisp
(let ((pc-sets '((0 1 3) (0 4 8))))
  (iterate:iter 
    (iterate:for pc-set in pc-sets)
    (iterate:collect (reverse pc-set))))

(let ((pc-sets '((0 1 3) (0 4 8))))
  (iterate:iter 
    (iterate:for pc-set in pc-sets)
    (iterate:collect
	(iterate:iter (iterate:for pc in pc-set)
		      (iterate:collect (+ 12 pc))))))


(iterate:iter 
	   (iterate:for i in '(0 1 3 4))
	   (iterate:collect (mapcar #'(lambda (x) (+ x i)) '(36 48 60))))

(let ((pc-set '(0 1 3)))
  (iterate:iter 
    (iterate:for i in pc-set)
    (iterate:collect (mapcar #'(lambda (x) (+ x i)) '(36 48 60)))))

(let ((pc-sets '((0 1 3) (0 1 4))))
  (iterate:iter 
    (iterate:for pc-set in pc-sets)
    (iterate:collect
	(iterate:iter 
	  (iterate:for i in pc-set)
	  (iterate:collect (mapcar #'(lambda (x) (+ x i)) '(36 48 60)))))))


(iterate:iter 
  (iterate:for pc-set in pc-sets)
  (iterate:collect
      (iterate:iter 
	(iterate:for i in pc-set)
	(iterate:collect (mapcar #'(lambda (x) (+ x i)) oct-list)))))

(let ((pc-sets '((0 1 4))))
  (iterate:iter 
    (iterate:for pc-set in pc-sets)
    (iterate:collect
	(iterate:iter 
	  (iterate:for i in pc-set)
	  (iterate:collect (mapcar #'(lambda (x) (+ x i)) '(36 48 60)))))))
#+END_SRC
